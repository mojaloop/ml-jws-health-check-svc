networks:
  mojaloop-net:
    name: mojaloop-net

# @see https://uninterrupted.tech/blog/hassle-free-redis-cluster-deployment-using-docker/
x-redis-node: &REDIS_NODE
  image: docker.io/bitnami/redis-cluster:6.2.14
  environment: &REDIS_ENVS
    ALLOW_EMPTY_PASSWORD: yes
    REDIS_CLUSTER_DYNAMIC_IPS: no
    REDIS_CLUSTER_ANNOUNCE_IP: ${REDIS_CLUSTER_ANNOUNCE_IP}
    REDIS_NODES: redis-node-0:6379 redis-node-1:9301 redis-node-2:9302 redis-node-3:9303 redis-node-4:9304 redis-node-5:9305
  healthcheck:
    test: [ "CMD", "redis-cli", "ping" ]
    timeout: 2s
  networks:
    - mojaloop-net

services:
  ping-pong-svc:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ping-pong-svc
    ports:
      - "3300:3300"
      - "3301:3301"
    networks:
      - mojaloop-net
    volumes:
       - ./docker/ping-pong-svc/default.json:/opt/app/dist/config/default.json
    environment:
      - NODE_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3300/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    container_name: redis
    image: "redis:6.2.4-alpine"
    networks:
      - mojaloop-net
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5

  central-ledger:
    image: mojaloop/central-ledger:v17.8.0-snapshot.34
    container_name: als_central-ledger
    user: root
    command:
      - "sh"
      - "-c"
      - "sh /opt/wait-for/wait-for-central-ledger.sh && node src/api/index.js"
    ports:
      - "${CL_PORT:-3001}:3001"
    volumes:
       - ./docker/central-ledger/default.json:/opt/app/config/default.json
       - ./docker/wait-for:/opt/wait-for
    environment:
      - LOG_LEVEL=debug
      - CLEDG_DATABASE_URI=mysql://central_ledger:password@mysql-cl:3306/central_ledger
      - CLEDG_SIDECAR__DISABLED=true
      - CLEDG_MONGODB__DISABLED=true
    networks:
      - mojaloop-net
    depends_on:
      - mysql-cl
      - kafka
      - redis-node-0
    extra_hosts:
      - "redis-node-0:host-gateway"
    healthcheck:
      test: ["CMD", "sh", "-c" ,"apk --no-cache add curl", ";", "curl", "http://localhost:3001/health"]
      timeout: 20s
      retries: 10
      interval: 30s

  kafka:
    image: johnnypark/kafka-zookeeper:2.3.0
    container_name: als_kafka
    volumes:
      - ./docker/kafka/:/opt/kafka_2.12-2.3.0/config/
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      - ZOO_LOG4J_PROP=WARN
    networks:
      - mojaloop-net
    healthcheck:
      test: ["CMD", "/opt/kafka_2.12-2.3.0/bin/kafka-broker-api-versions.sh", "--bootstrap-server", "kafka:29092"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s

  mysql-cl:
    image: mysql/mysql-server
    container_name: als_mysql_central_ledger
    ports:
      - "3307:3306"
    volumes:
      - ./docker/sql-init-central-ledger/:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_USER=${DBUSER:-central_ledger}
      - MYSQL_PASSWORD=${DBPASS:-password}
      - MYSQL_DATABASE=${DBUSER:-central_ledger}
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
    networks:
      - mojaloop-net
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "mysql-cl"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s

  redis-node-0:
    <<: *REDIS_NODE
    environment:
      <<: *REDIS_ENVS
      REDIS_CLUSTER_CREATOR: yes
      REDIS_PORT_NUMBER: 6379
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
  redis-node-1:
    <<: *REDIS_NODE
    environment:
      <<: *REDIS_ENVS
      REDIS_PORT_NUMBER: 6380
    ports:
      - "16380:16380"
  redis-node-2:
    <<: *REDIS_NODE
    environment:
      <<: *REDIS_ENVS
      REDIS_PORT_NUMBER: 6381
    ports:
      - "16381:16381"
  redis-node-3:
    <<: *REDIS_NODE
    environment:
      <<: *REDIS_ENVS
      REDIS_PORT_NUMBER: 6382
    ports:
      - "16382:16382"
  redis-node-4:
    <<: *REDIS_NODE
    environment:
      <<: *REDIS_ENVS
      REDIS_PORT_NUMBER: 6383
    ports:
      - "16383:16383"
  redis-node-5:
    <<: *REDIS_NODE
    environment:
      <<: *REDIS_ENVS
      REDIS_PORT_NUMBER: 6384
    ports:
      - "16384:16384"

  mojaloop-testing-toolkit:
    image: mojaloop/ml-testing-toolkit:${TEST_TTK_SVC_VERSION}
    container_name: mojaloop-testing-toolkit
    volumes:
      - "./docker/ml-testing-toolkit/spec_files:/opt/app/spec_files"
      - "./docker/ml-testing-toolkit/test-cases:/opt/app/examples"
    ports:
      - "9440:4040"
      - "9550:5050"
    user: root
    command:
      - sh
      - -c
      - "npm start"
    networks:
      - mojaloop-net
    healthcheck:
      test: ["CMD-SHELL", "nc -z -v localhost 4040"]
      interval: 5s
      timeout: 10s
      start_period: 10s
      retries: 10
    profiles:
      - testing-toolkit
      - all-services

  mojaloop-testing-toolkit-ui:
    image: mojaloop/ml-testing-toolkit-ui:${TEST_TTK_UI_VERSION}
    ports:
      - "9660:6060"
    environment:
      ## Change localhost to the host IP if you are running the UI on a different machine
      - API_BASE_URL=http://localhost:9550
      - AUTH_ENABLED=FALSE
    command:
      - sh
      - /usr/share/nginx/start.sh
    user: root
    networks:
      - mojaloop-net
    profiles:
      - testing-toolkit
      - all-services

  ttk-provisioning:
    image: mojaloop/ml-testing-toolkit-client-lib:${TEST_TTK_CLI_VERSION}
    volumes:
      - "./docker/ml-testing-toolkit/test-cases/collections:/opt/app/collections"
      - "./docker/ml-testing-toolkit/test-cases/environments:/opt/app/environments"
      - "./reports:/opt/app/reports"
    depends_on:
      mojaloop-testing-toolkit:
        condition: service_healthy
      central-ledger:
        condition: service_healthy
      central-handler-position-batch:
        condition: service_healthy
      ml-api-adapter:
        condition: service_healthy
      account-lookup-service:
        condition: service_healthy
      quoting-service:
        condition: service_healthy
      quoting-service-handler:
        condition: service_healthy
    networks:
      - mojaloop-net
    command:
      - sh
      - -c
      - "npm run cli -- -u http://mojaloop-testing-toolkit:5050 -l 2 -i collections/provisioning -e environments/default-env.json --labels std --save-report true --report-format html --report-target file://reports/ttk-provisioning-report.html"
    user: root
    profiles:
      - ttk-provisioning
